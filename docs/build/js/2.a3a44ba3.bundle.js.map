{"version":3,"sources":["webpack:///./demo/demo/service_time.js","webpack:///./node_modules/gm-service/src/service_time/receive_time.js"],"names":["__webpack_require__","_receive_time","_index","testDatas","e_span_time","r_end","r_start","receiveEndSpan","receiveTimeSpan","s_span_time","time_config_id","ReceiveTime","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","handleStart","date","setState","values","state","React","Component","_this2","receive_time_limit","limit","cycleList","getCycleList","sV","eV","startCycleList","getStartCycleList","endCycleList","getEndCycleList","_moment2","default","_react2","createElement","JSON","stringify","Flex","format","_","map","c","i","key","d","j","onClick","bind","cycleListToDayList","processReceiveTimeLimit","getTime","spanTime","timeStr","add","set","hours","split","minute","startOf","_extends","processStartEndValues","receiveTime","defaultSpanStartFlag","defaultStart","startValues","endValues","defaultSpanEndFlag","defaultEnd","range","cycle","now","flag","end","result","push","getOneCycleTimes","list","slice","filter","v","length","startDate","cycleIndex","each","flatten","dayEnd","temp","endOf"],"mappings":"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","file":"js/2.a3a44ba3.bundle.js","sourcesContent":["import React from 'react'\nimport {\n  processReceiveTimeLimit,\n  getCycleList,\n  getStartCycleList,\n  getEndCycleList,\n  cycleListToDayList\n} from 'gm-service/src/service_time/receive_time'\nimport _ from 'lodash'\nimport { Flex } from '../../src/index'\nimport moment from 'moment'\n\nconst testDatas = [{\n  e_span_time: 2,\n  r_end: '02:00',\n  r_start: '22:00',\n  receiveEndSpan: 1,\n  receiveTimeSpan: '30',\n  s_span_time: 0,\n  time_config_id: 'ST997'\n}, {\n  e_span_time: 0,\n  r_end: '02:00',\n  r_start: '02:00',\n  receiveEndSpan: 1,\n  receiveTimeSpan: '30',\n  s_span_time: 0,\n  time_config_id: 'ST997'\n}, {\n  e_span_time: 0,\n  r_end: '23:00',\n  r_start: '22:00',\n  receiveEndSpan: null,\n  receiveTimeSpan: '30',\n  s_span_time: 0,\n  time_config_id: 'ST997'\n}, {\n  e_span_time: 2,\n  r_end: '02:00',\n  r_start: '22:00',\n  receiveEndSpan: 1,\n  receiveTimeSpan: '30',\n  s_span_time: 0,\n  time_config_id: 'ST997'\n}]\n\nclass ReceiveTime extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      values: [null, null]\n    }\n  }\n\n  handleStart = (date) => {\n    this.setState({\n      values: [+date, null]\n    })\n  }\n\n  render () {\n    const receive_time_limit = this.props.limit\n\n    const cycleList = getCycleList(receive_time_limit)\n\n    const sV = this.state.values[0]\n    const eV = this.state.values[1]\n\n    const startCycleList = getStartCycleList(cycleList)\n    let endCycleList = []\n    if (sV) {\n      endCycleList = getEndCycleList(moment(sV), cycleList)\n    }\n\n    return (\n      <div>\n        <pre>\n          {JSON.stringify(receive_time_limit, null, 2)}\n        </pre>\n\n        <Flex>\n          <div>\n            <div>开始 {sV && moment(sV).format('DD HH:mm')}</div>\n            {_.map(startCycleList, (c, i) => (\n              <div key={i}>\n                <hr/>\n                {_.map(c, (d, j) => (\n                  <div key={j} onClick={this.handleStart.bind(this, d)}>{d.format('DD HH:mm')}</div>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div>\n            <div>结算 {eV && moment(eV).format('DD HH:mm')}</div>\n            {_.map(endCycleList, (c, i) => (\n              <div key={i}>\n                <hr/>\n                {_.map(c, (d, j) => (\n                  <div key={j} onClick={this.handleStart.bind(this, d)}>{d.format('DD HH:mm')}</div>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div>\n            <div>转换成dayList</div>\n            {_.map(cycleListToDayList(startCycleList), (c, i) => (\n              <div key={i}>\n                <hr/>\n                {_.map(c, (d, j) => (\n                  <div key={j} onClick={this.handleStart.bind(this, d)}>{d.format('DD HH:mm')}</div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </Flex>\n\n      </div>\n    )\n  }\n}\n\nclass Component extends React.Component {\n  render () {\n    return (\n      <div>\n        {_.map(testDatas, (limit, i) => <ReceiveTime key={i} limit={processReceiveTimeLimit(limit)}/>)}\n      </div>\n    )\n  }\n}\n\nexport default Component\n","import _ from 'lodash'\nimport moment from 'moment'\n\n// 注意：为了方便，此库的日期都用 moment 格式表示，非 Date\n// 选开始才选结束\n//\n// 收货开始时间不能和结算时间一样\n// 如果某周期只有一个点，则此周期不能选\n\n// 数据结构\n// const receive_ime = {\n//   'msg': '12-26 00:00~12-27 00:00',\n//   'receive_time_limit': {\n//     'r_start': '01:30',\n//     'e_span_time': 14,\n//     'receiveTimeSpan': '15',\n//     's_span_time': 0,\n//     'time_config_id': 'ST1305',\n//     'r_end': '01:30',\n//     'receiveEndSpan': 1\n//   },\n//   'receive_time': {\n//     'defaultStart': '00:00',\n//     'defaultSpanStartFlag': 12,\n//     'defaultEnd': '00:00',\n//     'defaultSpanEndFlag': 13\n//   }\n// }\n\n/*\n* 收货时间分可以分为于是和非预算\n* 目前 receiveTimeSpan 为 null，即代表非预售（预算这个一定有值）\n* 非预售可以通过 e_span_time 和 s_span_time 来判断是否跨天\n* */\nfunction processReceiveTimeLimit (receive_time_limit) {\n  const {\n    receiveEndSpan,\n    s_span_time,\n    e_span_time\n  } = receive_time_limit\n\n  return {\n    ...receive_time_limit,\n    receiveEndSpan: receiveEndSpan !== null ? receiveEndSpan : (e_span_time - s_span_time)\n  }\n}\n\n// 处理 默认收货时间时间。receive_time 可能不存在。默认收货时间可能不合法，和当前时间比较\nfunction processStartEndValues (receiveTime) {\n  if (!receiveTime) {\n    return {\n      startValues: [],\n      endValues: []\n    }\n  }\n\n  // 当天才需要校验,不合法直接 start end 不用\n  if (receiveTime.defaultSpanStartFlag === 0) {\n    const start = moment().set({\n      hours: receiveTime.defaultStart.split(':')[0],\n      minute: receiveTime.defaultStart.split(':')[1]\n    }).startOf('minute')\n\n    if (start < moment()) {\n      return {\n        startValues: [],\n        endValues: []\n      }\n    }\n  }\n\n  // 默认\n  let startValues = [\n    receiveTime.defaultSpanStartFlag,\n    receiveTime.defaultStart\n  ]\n  let endValues = [\n    receiveTime.defaultSpanEndFlag,\n    receiveTime.defaultEnd\n  ]\n\n  return {\n    startValues,\n    endValues\n  }\n}\n\nfunction getTime (spanTime, timeStr) {\n  return moment().add(spanTime, 'days').set({\n    hours: timeStr.split(':')[0],\n    minute: timeStr.split(':')[1]\n  }).startOf('minute')\n}\n\n// 获取一个周期的时间\nfunction getOneCycleTimes (spanTime, receive_time_limit) {\n  const {\n    receiveEndSpan,\n    r_start,\n    r_end,\n    receiveTimeSpan\n  } = receive_time_limit\n\n  const now = moment()\n  let flag = getTime(spanTime, r_start)\n  const end = getTime(spanTime + receiveEndSpan, r_end)\n\n  const result = []\n\n  while (flag <= end) {\n    // 只有大于当前时间才有效\n    if (flag > now) {\n      result.push(moment(flag))\n    }\n\n    flag = flag.add(~~receiveTimeSpan, 'minutes')\n  }\n\n  return result\n}\n\n// 核心。把周期时间输出一个二维数组，每个元素是当前周期的时间点\nfunction getCycleList (receive_time_limit) {\n  const {\n    s_span_time,\n    e_span_time\n  } = receive_time_limit\n\n  const cycleList = _.range(s_span_time, e_span_time + 1)\n\n  return _.map(cycleList, cycle => {\n    return getOneCycleTimes(cycle, receive_time_limit)\n  })\n}\n\n// 获取开始收货时间的带选项。由于开始时间和结束时间不能一直，估需过滤每个周期最后一个选项。 如果过滤后周期内只存在一个周期，则抛弃\nfunction getStartCycleList (cycleList) {\n  let result = _.map(cycleList, list => {\n    return list.slice(0, -1)\n  })\n\n  return _.filter(result, v => v.length > 1)\n}\n\n// 获取开始后货时间的待选项。\n// 当开始选择后，自然有开始时间 startDate，根据此时间去查属于哪个周期，自然得到待选项\nfunction getEndCycleList (startDate, cycleList) {\n  let cycleIndex = 0\n  _.each(cycleList, (list, i) => {\n    if (startDate > list[0]) {\n      cycleIndex = i\n    }\n  })\n\n  return [_.filter(cycleList[cycleIndex], v => v > startDate)]\n}\n\n// 周期列表格式对用户看到的待选项UI并不友好，估需要转换下，按日期格式分\nfunction cycleListToDayList (cycleList) {\n  const result = []\n  // 打平\n  const list = _.flatten(cycleList)\n\n  let dayEnd = null\n  let temp = []\n  _.each(list, d => {\n    if (!dayEnd) {\n      dayEnd = moment(d).endOf('day')\n    }\n    if (d > dayEnd) {\n      result.push(temp)\n\n      dayEnd = null\n      temp = [d]\n    } else {\n      temp.push(d)\n    }\n  })\n\n  result.push(temp)\n\n  return result\n}\n\nexport {\n  processReceiveTimeLimit,\n  processStartEndValues,\n  getCycleList,\n  getStartCycleList,\n  getEndCycleList,\n  cycleListToDayList\n}\n"],"sourceRoot":""}